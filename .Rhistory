# Função para Distribuição Triangular
DistrTriang = function(Aleat, Min, Max, Prov){
I = (Prov - Min) / (Max - Min);
if(Aleat < I){
Sim = Min + (Max - Min) * sqrt(Aleat * I);
} else {
Sim = Min + (Max - Min) * (1-sqrt((1-Aleat) * (1-I)));
}
return(Sim);
};
# Cria Data Frame vazio.
Simulacoes = data.frame(replicate(Dados.Simulacoes,0), replicate(Dados.Simulacoes,0), replicate(Dados.Simulacoes,0));
names(Simulacoes) = c("Pedidos", "Atendimentos", "CustoTotal");
# Simulação dos Pedidos
Simulacoes$Pedidos = mapply(DistrTriang, runif(Dados.Simulacoes), Pedidos.Minimo, Pedidos.Maximo, Pedidos.Provavel);
# Simulação dos Atendimentos
Simulacoes$Atendimentos = mapply(DistrTriang, runif(Dados.Simulacoes), Atend.Minimo, Atend.Maximo, Atend.Provavel);
#Simulação do Custo Total
Simulacoes$CustoTotal = mapply(CustoTotal, Simulacoes$Pedidos, Simulacoes$Atendimentos, Dados.Funcionarios);
# Resumo
summary(Simulacoes$CustoTotal);
# Box-plot
boxplot(Simulacoes$CustoTotal);
# Histograma
hist(Simulacoes$CustoTotal, main="Histograma", xlab="Valor", ylab="Freq");
# Análise dos Decis
quantile(Simulacoes$CustoTotal, seq(0, 1, 0.1));
plot(quantile(Simulacoes$CustoTotal, seq(0, 1, 0.1)));
plot(quantile(Simulacoes$CustoTotal, seq(0, 1, 0.1)), lty=1);
plot(quantile(Simulacoes$CustoTotal, seq(0, 1, 0.1)), lty=1);
plot(quantile(Simulacoes$CustoTotal, seq(0, 1, 0.1)), lty=2);
plot(quantile(Simulacoes$CustoTotal, seq(0, 1, 0.1)), type=1);
plot(quantile(Simulacoes$CustoTotal, seq(0, 1, 0.1)), type=2);
plot(quantile(Simulacoes$CustoTotal, seq(0, 1, 0.1)), type=3);
plot(quantile(Simulacoes$CustoTotal, seq(0, 1, 0.1)), type=1);
# Limpeza
rm(list=ls());
# Número de Simulações Desejadas.
Dados.Simulacoes = 1000;
# Dados do Problema
Dados.CustoContrato = 7900;
Dados.CustoAvulso = 110;
Pedidos.Minimo = 400;
Pedidos.Maximo = 600;
Pedidos.Provavel = 450;
Atend.Minimo = 60;
Atend.Maximo = 90;
Atend.Provavel = 80;
# Função para Cálculo do Custo Total
CustoTotal = function(Pedidos, Atend, Func){
Custos.Fixo = Func * Dados.CustoContrato;
Custos.AtendAvulsos = Pedidos - (Func * Atend);
if(Custos.AtendAvulsos>0){
Custos.Avulsos = Custos.AtendAvulsos * Dados.CustoAvulso;
} else {
Custos.Avulsos = 0;
}
return(Custos.Fixo + Custos.Avulsos);
};
# Função para Distribuição Triangular
DistrTriang = function(Aleat, Min, Max, Prov){
I = (Prov - Min) / (Max - Min);
if(Aleat < I){
Sim = Min + (Max - Min) * sqrt(Aleat * I);
} else {
Sim = Min + (Max - Min) * (1-sqrt((1-Aleat) * (1-I)));
}
return(Sim);
};
# Cria Data Frame vazio.
Simulacoes = data.frame(replicate(Dados.Simulacoes,0), replicate(Dados.Simulacoes,0), replicate(Dados.Simulacoes,0));
names(Simulacoes) = c("Pedidos", "Atendimentos", "CustoTotal");
# Simulação dos Pedidos
Simulacoes$Pedidos = mapply(DistrTriang, runif(Dados.Simulacoes), Pedidos.Minimo, Pedidos.Maximo, Pedidos.Provavel);
# Simulação dos Atendimentos
Simulacoes$Atendimentos = mapply(DistrTriang, runif(Dados.Simulacoes), Atend.Minimo, Atend.Maximo, Atend.Provavel);
# Simulação do Custo Total para 2 funcionários
Simulacoes$CustoTotal_2 = mapply(CustoTotal, Simulacoes$Pedidos, Simulacoes$Atendimentos, 2);
# Simulação do Custo Total para 3 funcionários
Simulacoes$CustoTotal_3 = mapply(CustoTotal, Simulacoes$Pedidos, Simulacoes$Atendimentos, 3);
# Simulação do Custo Total para 4 funcionários
Simulacoes$CustoTotal_4 = mapply(CustoTotal, Simulacoes$Pedidos, Simulacoes$Atendimentos, 4);
# Simulação do Custo Total para 5 funcionários
Simulacoes$CustoTotal_5 = mapply(CustoTotal, Simulacoes$Pedidos, Simulacoes$Atendimentos, 5);
# Simulação do Custo Total para 6 funcionários
Simulacoes$CustoTotal_6 = mapply(CustoTotal, Simulacoes$Pedidos, Simulacoes$Atendimentos, 6);
boxplot(Simulacoes$CustoTotal_2, Simulacoes$CustoTotal_3, Simulacoes$CustoTotal_4, Simulacoes$CustoTotal_5, Simulacoes$CustoTotal_6);
rm(list=ls());
# Número de Simulações Desejadas.
Dados.Simulacoes = 1000;
# Dados do Problema
Dados.CustoContrato = 7900;
Dados.CustoAvulso = 110;
Pedidos.Minimo = 400;
Pedidos.Maximo = 600;
Pedidos.Provavel = 450;
Atend.Minimo = 60;
Atend.Maximo = 90;
Atend.Provavel = 80;
# Função para Cálculo do Custo Total
CustoTotal = function(Pedidos, Atend, Func){
Custos.Fixo = Func * Dados.CustoContrato;
Custos.AtendAvulsos = Pedidos - (Func * Atend);
if(Custos.AtendAvulsos>0){
Custos.Avulsos = Custos.AtendAvulsos * Dados.CustoAvulso;
} else {
Custos.Avulsos = 0;
}
return(Custos.Fixo + Custos.Avulsos);
};
# Função para Distribuição Triangular
DistrTriang = function(Aleat, Min, Max, Prov){
I = (Prov - Min) / (Max - Min);
if(Aleat < I){
Sim = Min + (Max - Min) * sqrt(Aleat * I);
} else {
Sim = Min + (Max - Min) * (1-sqrt((1-Aleat) * (1-I)));
}
return(Sim);
};
# Cria Data Frame vazio.
Simulacoes = data.frame(replicate(Dados.Simulacoes,0), replicate(Dados.Simulacoes,0), replicate(Dados.Simulacoes,0));
names(Simulacoes) = c("Pedidos", "Atendimentos", "CustoTotal");
# Simulação dos Pedidos
Simulacoes$Pedidos = mapply(DistrTriang, runif(Dados.Simulacoes), Pedidos.Minimo, Pedidos.Maximo, Pedidos.Provavel);
# Simulação dos Atendimentos
Simulacoes$Atendimentos = mapply(DistrTriang, runif(Dados.Simulacoes), Atend.Minimo, Atend.Maximo, Atend.Provavel);
# Simulação do Custo Total para 2 funcionários
Simulacoes$CustoTotal = mapply(CustoTotal, Simulacoes$Pedidos, Simulacoes$Atendimentos, 2);
# Resumo
summary(Simulacoes$CustoTotal);
# Box-plot
boxplot(Simulacoes$CustoTotal);
# Histograma
hist(Simulacoes$CustoTotal, main="Histograma", xlab="Valor", ylab="Freq");
# Análise dos Decis
quantile(Simulacoes$CustoTotal, seq(0, 1, 0.1));
# Limpeza
rm(list=ls());
library(ggplot2);
Base = ggplot(Simulacoes, aes(x="", y=CustoTotal));
Base + geom_boxplot();
library(ggplot2);
# Número de Simulações Desejadas.
Dados.Simulacoes = 1000;
# Dados do Problema
Dados.CustoContrato = 7900;
Dados.CustoAvulso = 110;
Pedidos.Minimo = 400;
Pedidos.Maximo = 600;
Pedidos.Provavel = 450;
Atend.Minimo = 60;
Atend.Maximo = 90;
Atend.Provavel = 80;
# Função para Cálculo do Custo Total
CustoTotal = function(Pedidos, Atend, Func){
Custos.Fixo = Func * Dados.CustoContrato;
Custos.AtendAvulsos = Pedidos - (Func * Atend);
if(Custos.AtendAvulsos>0){
Custos.Avulsos = Custos.AtendAvulsos * Dados.CustoAvulso;
} else {
Custos.Avulsos = 0;
}
return(Custos.Fixo + Custos.Avulsos);
};
# Função para Distribuição Triangular
DistrTriang = function(Aleat, Min, Max, Prov){
I = (Prov - Min) / (Max - Min);
if(Aleat < I){
Sim = Min + (Max - Min) * sqrt(Aleat * I);
} else {
Sim = Min + (Max - Min) * (1-sqrt((1-Aleat) * (1-I)));
}
return(Sim);
};
# Cria Data Frame vazio.
Simulacoes = data.frame(replicate(Dados.Simulacoes,0), replicate(Dados.Simulacoes,0), replicate(Dados.Simulacoes,0));
names(Simulacoes) = c("Pedidos", "Atendimentos", "CustoTotal");
# Simulação dos Pedidos
Simulacoes$Pedidos = mapply(DistrTriang, runif(Dados.Simulacoes), Pedidos.Minimo, Pedidos.Maximo, Pedidos.Provavel);
# Simulação dos Atendimentos
Simulacoes$Atendimentos = mapply(DistrTriang, runif(Dados.Simulacoes), Atend.Minimo, Atend.Maximo, Atend.Provavel);
# Simulação do Custo Total para 2 funcionários
Simulacoes$CustoTotal = mapply(CustoTotal, Simulacoes$Pedidos, Simulacoes$Atendimentos, 2);
# Resumo
summary(Simulacoes$CustoTotal);
Base = ggplot(Simulacoes, aes(x="", y=CustoTotal));
Base + geom_boxplot();
Base = ggplot(Simulacoes, aes(x=CustoTotal));
Base + geom_histogram(fill="black", color="black", alpha=0.4, bins=30);
# Análise dos Decis
quantile(Simulacoes$CustoTotal, seq(0, 1, 0.1));
# Limpeza
rm(list=ls());
library(ggplot2);
# Número de Simulações Desejadas.
Dados.Simulacoes = 1000;
# Dados do Problema
Dados.Funcionarios = 2;
Dados.CustoContrato = 7900;
Dados.CustoAvulso = 110;
Pedidos.Minimo = 400;
Pedidos.Maximo = 600;
Pedidos.Provavel = 450;
Atend.Minimo = 60;
Atend.Maximo = 90;
Atend.Provavel = 80;
# Função para Cálculo do Custo Total
CustoTotal = function(Pedidos, Atend, Func){
Custos.Fixo = Func * Dados.CustoContrato;
Custos.AtendAvulsos = Pedidos - (Func * Atend);
if(Custos.AtendAvulsos>0){
Custos.Avulsos = Custos.AtendAvulsos * Dados.CustoAvulso;
} else {
Custos.Avulsos = 0;
}
return(Custos.Fixo + Custos.Avulsos);
};
# Função para Distribuição Triangular
DistrTriang = function(Aleat, Min, Max, Prov){
I = (Prov - Min) / (Max - Min);
if(Aleat < I){
Sim = Min + (Max - Min) * sqrt(Aleat * I);
} else {
Sim = Min + (Max - Min) * (1-sqrt((1-Aleat) * (1-I)));
}
return(Sim);
};
# Cria Data Frame vazio.
Simulacoes = data.frame(replicate(Dados.Simulacoes,0), replicate(Dados.Simulacoes,0), replicate(Dados.Simulacoes,0));
names(Simulacoes) = c("Pedidos", "Atendimentos", "CustoTotal");
# Simulação dos Pedidos
Simulacoes$Pedidos = mapply(DistrTriang, runif(Dados.Simulacoes), Pedidos.Minimo, Pedidos.Maximo, Pedidos.Provavel);
# Simulação dos Atendimentos
Simulacoes$Atendimentos = mapply(DistrTriang, runif(Dados.Simulacoes), Atend.Minimo, Atend.Maximo, Atend.Provavel);
# Simulação do Custo Total
Simulacoes$CustoTotal = mapply(CustoTotal, Simulacoes$Pedidos, Simulacoes$Atendimentos, Dados.Funcionarios);
# Resumo
summary(Simulacoes$CustoTotal);
# Box-plot
Base = ggplot(Simulacoes, aes(x="", y=CustoTotal));
Base + geom_boxplot();
# Histograma
Base = ggplot(Simulacoes, aes(x=CustoTotal));
Base + geom_histogram(fill="black", color="black", alpha=0.4, bins=30);
# Análise dos Decis
quantile(Simulacoes$CustoTotal, seq(0, 1, 0.1));
# Limpeza
rm(list=ls());
library(ggplot2);
# Número de Simulações Desejadas.
Dados.Simulacoes = 1000;
# Dados do Problema
Dados.Funcionarios = 8;
Dados.CustoContrato = 7900;
Dados.CustoAvulso = 110;
Pedidos.Minimo = 400;
Pedidos.Maximo = 600;
Pedidos.Provavel = 450;
Atend.Minimo = 60;
Atend.Maximo = 90;
Atend.Provavel = 80;
# Função para Cálculo do Custo Total
CustoTotal = function(Pedidos, Atend, Func){
Custos.Fixo = Func * Dados.CustoContrato;
Custos.AtendAvulsos = Pedidos - (Func * Atend);
if(Custos.AtendAvulsos>0){
Custos.Avulsos = Custos.AtendAvulsos * Dados.CustoAvulso;
} else {
Custos.Avulsos = 0;
}
return(Custos.Fixo + Custos.Avulsos);
};
# Função para Distribuição Triangular
DistrTriang = function(Aleat, Min, Max, Prov){
I = (Prov - Min) / (Max - Min);
if(Aleat < I){
Sim = Min + (Max - Min) * sqrt(Aleat * I);
} else {
Sim = Min + (Max - Min) * (1-sqrt((1-Aleat) * (1-I)));
}
return(Sim);
};
# Cria Data Frame vazio.
Simulacoes = data.frame(replicate(Dados.Simulacoes,0), replicate(Dados.Simulacoes,0), replicate(Dados.Simulacoes,0));
names(Simulacoes) = c("Pedidos", "Atendimentos", "CustoTotal");
# Simulação dos Pedidos
Simulacoes$Pedidos = mapply(DistrTriang, runif(Dados.Simulacoes), Pedidos.Minimo, Pedidos.Maximo, Pedidos.Provavel);
# Simulação dos Atendimentos
Simulacoes$Atendimentos = mapply(DistrTriang, runif(Dados.Simulacoes), Atend.Minimo, Atend.Maximo, Atend.Provavel);
# Simulação do Custo Total
Simulacoes$CustoTotal = mapply(CustoTotal, Simulacoes$Pedidos, Simulacoes$Atendimentos, Dados.Funcionarios);
# Resumo
summary(Simulacoes$CustoTotal);
# Box-plot
Base = ggplot(Simulacoes, aes(x="", y=CustoTotal));
Base + geom_boxplot();
# Histograma
Base = ggplot(Simulacoes, aes(x=CustoTotal));
Base + geom_histogram(fill="black", color="black", alpha=0.4, bins=30);
# Análise dos Decis
quantile(Simulacoes$CustoTotal, seq(0, 1, 0.1));
# Limpeza
rm(list=ls());
library(ggplot2);
# Número de Simulações Desejadas.
Dados.Simulacoes = 1000;
# Dados do Problema
Dados.Funcionarios = 6;
Dados.CustoContrato = 7900;
Dados.CustoAvulso = 110;
Pedidos.Minimo = 400;
Pedidos.Maximo = 600;
Pedidos.Provavel = 450;
Atend.Minimo = 60;
Atend.Maximo = 90;
Atend.Provavel = 80;
# Função para Cálculo do Custo Total
CustoTotal = function(Pedidos, Atend, Func){
Custos.Fixo = Func * Dados.CustoContrato;
Custos.AtendAvulsos = Pedidos - (Func * Atend);
if(Custos.AtendAvulsos>0){
Custos.Avulsos = Custos.AtendAvulsos * Dados.CustoAvulso;
} else {
Custos.Avulsos = 0;
}
return(Custos.Fixo + Custos.Avulsos);
};
# Função para Distribuição Triangular
DistrTriang = function(Aleat, Min, Max, Prov){
I = (Prov - Min) / (Max - Min);
if(Aleat < I){
Sim = Min + (Max - Min) * sqrt(Aleat * I);
} else {
Sim = Min + (Max - Min) * (1-sqrt((1-Aleat) * (1-I)));
}
return(Sim);
};
# Cria Data Frame vazio.
Simulacoes = data.frame(replicate(Dados.Simulacoes,0), replicate(Dados.Simulacoes,0), replicate(Dados.Simulacoes,0));
names(Simulacoes) = c("Pedidos", "Atendimentos", "CustoTotal");
# Simulação dos Pedidos
Simulacoes$Pedidos = mapply(DistrTriang, runif(Dados.Simulacoes), Pedidos.Minimo, Pedidos.Maximo, Pedidos.Provavel);
# Simulação dos Atendimentos
Simulacoes$Atendimentos = mapply(DistrTriang, runif(Dados.Simulacoes), Atend.Minimo, Atend.Maximo, Atend.Provavel);
# Simulação do Custo Total
Simulacoes$CustoTotal = mapply(CustoTotal, Simulacoes$Pedidos, Simulacoes$Atendimentos, Dados.Funcionarios);
# Resumo
summary(Simulacoes$CustoTotal);
# Box-plot
Base = ggplot(Simulacoes, aes(x="", y=CustoTotal));
Base + geom_boxplot();
# Histograma
Base = ggplot(Simulacoes, aes(x=CustoTotal));
Base + geom_histogram(fill="black", color="black", alpha=0.4, bins=30);
# Análise dos Decis
quantile(Simulacoes$CustoTotal, seq(0, 1, 0.1));
# Limpeza
rm(list=ls());
library(ggplot2);
# Número de Simulações Desejadas.
Dados.Simulacoes = 1000;
# Dados do Problema
Dados.Funcionarios = 6;
Dados.CustoContrato = 7900;
Dados.CustoAvulso = 110;
Pedidos.Minimo = 400;
Pedidos.Maximo = 600;
Pedidos.Provavel = 450;
Atend.Minimo = 60;
Atend.Maximo = 90;
Atend.Provavel = 80;
# Função para Cálculo do Custo Total
CustoTotal = function(Pedidos, Atend, Func){
Custos.Fixo = Func * Dados.CustoContrato;
Custos.AtendAvulsos = Pedidos - (Func * Atend);
if(Custos.AtendAvulsos>0){
Custos.Avulsos = Custos.AtendAvulsos * Dados.CustoAvulso;
} else {
Custos.Avulsos = 0;
}
return(Custos.Fixo + Custos.Avulsos);
};
# Função para Distribuição Triangular
DistrTriang = function(Aleat, Min, Max, Prov){
I = (Prov - Min) / (Max - Min);
if(Aleat < I){
Sim = Min + (Max - Min) * sqrt(Aleat * I);
} else {
Sim = Min + (Max - Min) * (1-sqrt((1-Aleat) * (1-I)));
}
return(Sim);
};
# Cria Data Frame vazio.
Simulacoes = data.frame(replicate(Dados.Simulacoes,0), replicate(Dados.Simulacoes,0), replicate(Dados.Simulacoes,0));
names(Simulacoes) = c("Pedidos", "Atendimentos", "CustoTotal");
# Simulação dos Pedidos
Simulacoes$Pedidos = mapply(DistrTriang, runif(Dados.Simulacoes), Pedidos.Minimo, Pedidos.Maximo, Pedidos.Provavel);
# Simulação dos Atendimentos
Simulacoes$Atendimentos = mapply(DistrTriang, runif(Dados.Simulacoes), Atend.Minimo, Atend.Maximo, Atend.Provavel);
# Simulação do Custo Total
Simulacoes$CustoTotal = mapply(CustoTotal, Simulacoes$Pedidos, Simulacoes$Atendimentos, Dados.Funcionarios);
# Resumo
summary(Simulacoes$CustoTotal);
# Box-plot
Base = ggplot(Simulacoes, aes(x="", y=CustoTotal));
Base + geom_boxplot();
# Histograma
Base = ggplot(Simulacoes, aes(x=CustoTotal));
Base + geom_histogram(fill="black", color="black", alpha=0.4, bins=30);
# Análise dos Decis
quantile(Simulacoes$CustoTotal, seq(0, 1, 0.1));
# Limpeza
rm(list=ls());
setwd("D:/Estudos/FGV/TCC/Rio2016");
library(ggplot2);
library(gmodels);
#################################
# Análises do Top-4
#################################
# Carga dos Dados
Top4.Tiros = read.csv("Rio2016_Resultados_Top4_Tiros.csv", sep=";", dec=".");
Top4.Series = read.csv("Rio2016_Resultados_Top4_Series.csv", sep=";", dec=".");
summary(Top4.Tiros[-1]);
var(Top4.Tiros[-1]);
boxplot(Top4.Tiros[-1]);
summary(Top4.Series[-1]);
var(Top4.Series[-1]);
boxplot(Top4.Series[-1]);
#################################
# Análises do Round
#################################
# Dados
Dados = read.csv("RoundOlimpico_Rio2016_Individual.csv", sep=";", dec=",");
# Número de Amarelos
Dados$Amarelos = Dados$Dez + Dados$Nove;
# Análise Exploratória
hist(Dados$RoundTotal);
boxplot(Dados$RoundTotal);
hist(Dados$Dez);
boxplot(Dados$Dez);
hist(Dados$Nove);
boxplot(Dados$Nove);
hist(Dados$Amarelos);
boxplot(Dados$Amarelos);
hist(Dados$WorldRanking);
boxplot(Dados$WorldRanking);
table(Dados$Finalista);
#################################
# Padronização de Variáveis
#################################
Dados$Round1_S = scale(Dados$Round1);
Dados$Round2_S = scale(Dados$Round2);
Dados$RoundTotal_S = scale(Dados$RoundTotal);
Dados$Dez_S = scale(Dados$Dez);
Dados$X_S = scale(Dados$X);
Dados$Nove_S = scale(Dados$Nove);
Dados$WorldRanking_S = scale(Dados$WorldRanking);
Dados$PontosCombates_S = scale(Dados$PontosCombates);
Dados$Amarelos_S = scale(Dados$Amarelos);
Dados$Classe = "Não Finalista";
Dados$Classe[which(Dados$Finalista==1)] = "Finalista";
Dados$Classe = factor(Dados$Classe);
#################################
# Análise de Cluster
#################################
Cluster.Dados = Dados[, c(19,20,23,24,25)];
# Análise com 4 Grupos
Cluster.Modelo = kmeans(Cluster.Dados,4);
Dados$Cluster.4 = Cluster.Modelo$cluster;
CrossTable(Dados$Cluster.4, Dados$Classe, chisq=FALSE);
aggregate(cbind(Dados$RoundTotal, Dados$Dez, Dados$WorldRanking, Dados$PontosCombates, Dados$Amarelos), list(Dados$Cluster.4), mean);
# Análise com 5 Grupos
Cluster.Modelo = kmeans(Cluster.Dados,5);
Dados$Cluster.5 = Cluster.Modelo$cluster;
CrossTable(Dados$Cluster.5, Dados$Classe, chisq=FALSE);
aggregate(cbind(Dados$RoundTotal, Dados$Dez, Dados$WorldRanking, Dados$PontosCombates, Dados$Amarelos), list(Dados$Cluster.5), mean);
#################################
# Previsão de Finalistas com KNN
#################################
library(class);
Knn.Base = Dados[, c(19,20,23,24,25)];
Knn.SorteioTeste = sample(Dados$Rank, 16, replace=TRUE);
Knn.BaseTeste = Knn.Base[Knn.SorteioTeste,];
Knn.ClassesTeste = Dados$Classe[Knn.SorteioTeste];
Knn.BaseTreino = Knn.Base[-Knn.SorteioTeste,];
Knn.ClassesTreino = Dados$Classe[-Knn.SorteioTeste];
Knn.Pred = knn(train=Knn.BaseTreino, test=Knn.BaseTeste, cl=Knn.ClassesTreino, k=8, prob=TRUE);
CrossTable(Knn.ClassesTeste, Knn.Pred, prop.chisq=FALSE);
################################################
# Previsão De Finalistas com Regressão Logística
################################################
# RegLog.Modelo = glm(Finalista ~ WorldRanking + PontosCombates + RoundTotal + Amarelos, family=binomial(logit), data=Dados);
RegLog.Modelo = glm(Finalista ~ WorldRanking_S + PontosCombates_S + RoundTotal_S + Amarelos_S, family=binomial(logit), data=Dados);
RegLog.Modelo;
# Predição
RegLog.Prob = predict.glm(RegLog.Modelo,type="response");
Dados = cbind(Dados, RegLog.Prob);
# Matriz de Confusão
PontoDeCorte = 0.9;
Dados$Previsao = "Não Finalista";
Dados$Previsao[which(Dados$RegLog.Prob>=PontoDeCorte)] = "Finalista";
CrossTable(Dados$Classe, Dados$Previsao, prop.chisq=FALSE);
library(caret);
install.packages("caret");
library(caret);
confusionMatrix(Dados$Previsao, Dados$Classes, positive="Finalista");
confusionMatrix(Dados$Previsao, Dados$Classe, positive="Finalista");
install.packages("e1071");
library(e1071);
confusionMatrix(Dados$Previsao, Dados$Classe, positive="Finalista");
rm(list=ls());
